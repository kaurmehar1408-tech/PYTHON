# âœ… 1. What are Loops?
# Loops are used to repeat a block of code multiple times until a condition is met.

# âœ… 2. Types of Loops in Python
# âœ… for loop â†’ Repeats for a sequence of elements (like list, string, range).
# âœ… while loop â†’ Repeats while a condition is True.

# âœ… 3. âœ… for Loop
# ðŸ”¹ Syntax
# for variable in sequence:
#     # block of code

# ðŸ”¹ Example 1: Loop through list
# fruits = ["apple", "banana", "grapes"]
# for fruit in fruits:
#     print(fruit)

# ðŸ”¹ Example 2: Loop through range (0 to 4)
# for i in range(5):
#     print(i)   # prints 0, 1, 2, 3, 4

# âœ… 4. âœ… while Loop
# ðŸ”¹ Syntax
# while condition:
#     # block of code
# ðŸ”¹ Example: Print numbers from 1 to 5
# i = 1
# while i <= 5:
#     print(i)
#     i += 1

# âœ… 5. âœ… break and continue
# ðŸ‘‰ break â†’ Exit the loop immediately.
# ðŸ‘‰ continue â†’ Skip current iteration, go to next.

# ðŸ”¹ Example with break
# for i in range(1, 10):
#     if i == 5:
#         break
#     print(i)  # Prints 1 to 4

# ðŸ”¹ Example with continue
# for i in range(1, 6):
#     if i == 3:
#         continue
#     print(i)  # Prints 1, 2, 4, 5 (skips 3)

# âœ… 6. âœ… else with Loops
# The else block runs when the loop completes normally (without break).
# ðŸ”¹ Example
# for i in range(3):
#     print(i)
# else:
#     print("Loop completed âœ…")

# âœ… 7. âœ… Nested Loops
# ðŸ‘‰ One loop inside another.
# for i in range(1, 4):         # Outer loop
#     for j in range(1, 3):     # Inner loop
#         print(i, j)

# âœ… 8. âœ… Infinite Loop (with caution)
# while True:
#     print("Infinite loop â€“ press Ctrl+C to stop!")
#     break   # Avoid infinite running in practice


# ðŸŒŸ Key Takeaways

# Use for when looping over sequences (lists, strings, ranges).

# Use while when the loop depends on a condition.

# Use break to exit early, continue to skip iteration.

# else executes when the loop didnâ€™t break.

# Avoid infinite loops unless absolutely necessary.

